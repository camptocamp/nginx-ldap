#!/usr/bin/env python
import os
import pwd
import grp
import sys
import signal
import base64
import ldap
import argparse
from http.server import HTTPServer, BaseHTTPRequestHandler
from data_file_descriptor import AccessType, DataFileStorage
import urllib.parse
from datetime import datetime
import json

# -----------------------------------------------------------------------------
# Requests are processed in separate thread
import threading
from socketserver import ThreadingMixIn
class AuthHTTPServer(ThreadingMixIn, HTTPServer):
    pass
# -----------------------------------------------------------------------------
# Requests are processed in separate process
# from SocketServer import ForkingMixIn
# class AuthHTTPServer(ForkingMixIn, HTTPServer):
#    pass
# -----------------------------------------------------------------------------
# Requests are processed with UNIX sockets
# Listen = "/tmp/auth.sock"
# import threading
# from SocketServer import ThreadingUnixStreamServer
# class AuthHTTPServer(ThreadingUnixStreamServer, HTTPServer):
#    pass
# -----------------------------------------------------------------------------
conf = {}



def read_conf(fname):
    """read file in pam_ldap format"""
    global conf
    opts = ['host', 'base', 'binddn', 'bindpw', 'ssl', 'filedescrpth', 'logdir']
    try:
        with open(fname) as f:
            for line in f:
                data = line.strip().split()
                if len(data) > 1 and data[0] in opts:
                    conf[data[0]] = ' '.join(data[1:])
    except:
        print("Unable to read {} as uid {}: {}".format(fname, os.getuid()))
        sys.exit(1)

    for o in opts[:4]:
        if o not in conf:
            print("Mandatory parameter '{}' was not found in config file {}!".format(o, fname))
            sys.exit(1)


def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    if os.getuid() != 0:
        return
    uid = pwd.getpwnam(uid_name).pw_uid
    gid = grp.getgrnam(gid_name).gr_gid
    os.setgroups([])
    os.setgid(gid)
    os.setuid(uid)


def exit_handler(signal, frame):
    sys.exit(0)

class Log:
    def __init__(self, info = None, priority='INFO', verb=None, code=None, username = None, uri = None, path = None):
        self.priority = priority
        self.timegenerated = str(datetime.now())
        self.verb = verb
        self.code = code
        self.username = username
        self.uri = uri
        self.path = path
        self.info = info
        self.print()

    def print(self):
        data = {
            "timegenerated" : self.timegenerated,
            "priority" : self.priority,
            "verb" : self.verb,
            "code" : self.code,
            "username" : self.username,
            "uri" : self.uri,
            "path" : self.path,
            "info" : self.info
        }
        print(json.dumps(data),flush=True)



class LdapUser:
    def __init__(self, user):
        # initialise LDAP and search the user
        self.response = None
        protocol = 'ldap://' if conf['ssl'] != 'on' else 'ldaps://'
        self.ldap_connection = None
        for host in conf['host'].split():
            try:
                self.ldap_connection = ldap.initialize(protocol + host)
                ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
                self.ldap_connection.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)
                self.ldap_connection.set_option(ldap.OPT_REFERRALS, 0)  # MS AD
                self.ldap_connection.set_option(ldap.OPT_NETWORK_TIMEOUT, 3)
                self.ldap_connection.simple_bind_s(conf['binddn'], conf['bindpw'])
                response = self.ldap_connection.search_s(base=conf['base'], scope=ldap.SCOPE_SUBTREE,
                                                filterstr='(&(objectClass=person)(uid=' + user + '))')
                self.user_dn = response[0][0] if len(response)>0 else None
                self.user_attributes = response[0][1] if len(response)>0 else None
            except (ldap.CONNECT_ERROR, ldap.SERVER_DOWN):
                self.unbind()
                # and try next server

    def check_authentication(self, password):
        # check user password
        try:
            authenticate = False
            #next op generates ldap.INVALID_CREDENTIALS exception if auth failed
            if self.user_dn is not None :
                self.ldap_connection.simple_bind_s(self.user_dn, password)
                authenticate = True
        except ldap.INVALID_CREDENTIALS:
            authenticate = False
        finally:
            return authenticate

    def unbind(self):
        if self.ldap_connection is not None:
            self.ldap_connection.unbind()
            self.ldap_connection = None
        self.response = None

    def check_autorisation(self, allowed_users, allowed_groups):
        if allowed_users is not None and self.user_attributes is not None :
            # case user in allowed_users
            user_id = str(self.user_attributes['uniqueIdentifier'][0], 'utf-8')
            if user_id in allowed_users :
                return True
        if allowed_groups is not None and self.user_attributes is not None :
            # case user has groups in common with the file
            user_groups = set([str(d, 'utf-8') for d in self.user_attributes['memberOf']])
            if len(user_groups & allowed_groups) > 0 :
                return True
        return False


class LDAPAuthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            ldap_user = None
            allowed_users = set()
            allowed_groups = set()
            auth_header = self.headers.get('Authorization')
            document_uri = self.headers.get('X-Ldap-Document-Uri')
            file_path = None
            document_uri_decoded = urllib.parse.unquote(document_uri)
            document_found = document_uri_decoded in files_descriptor.storage
            document_is_free_access = False
            document_is_public = False
            user = None
            http_code = None
            log_info = None

            if document_found:
                #initialise with metadata from myepfl
                file_path = files_descriptor.get(document_uri_decoded).file_path
                allowed_users = set((files_descriptor.get(document_uri_decoded).allowed_users))
                allowed_groups = set((files_descriptor.get(document_uri_decoded).allowed_groups))
                document_is_free_access = files_descriptor.get(document_uri_decoded).access_type == AccessType.free
                document_is_public = files_descriptor.get(document_uri_decoded).access_type == AccessType.public

            if document_is_free_access:
                #case document access need no authentication
                http_code = 200
                self.send_response(http_code)
                self.send_header('X-File-Path', file_path)
                return
            #case document access need authentication, extract user, password from header
            if auth_header and auth_header.lower().startswith('basic '):
                try :
                    user, password = str(base64.b64decode(auth_header[6:]), 'utf-8').split(':', 1)
                except :
                    user = None
            if user is not None :
                ldap_user = LdapUser(user)
                if ldap_user.check_authentication(password):
                    if document_found:
                        if document_is_public or ldap_user.check_autorisation(allowed_users, allowed_groups):
                            http_code = 200
                            self.send_response(http_code)
                            self.send_header('X-File-Path', file_path)
                            return
                        #user has no access to document
                        http_code = 403
                        self.send_response(http_code)
                        return
                    #the document doesn't exist, but nginx auth module doesn't support it ...
                    #so return 200, and an empty path
                    http_code = 200
                    self.send_response(http_code)
                    self.send_header('X-File-Path', "")
                    return
            #user failed to authenticate
            http_code = 401
            self.send_response(http_code)
            realm = self.headers.get('X-Ldap-Realm')
            if not realm:
                realm = 'Authentication required'
            self.send_header('WWW-Authenticate', 'Basic realm="{}"'.format(realm))
            self.send_header('Cache-Control', 'no-cache')
        except:
            http_code = 500
            self.send_response(http_code)
            self.send_header('X-Error-Message', sys.exc_info()[1])
            log_info = str(sys.exc_info()[0])
        finally:
            if ldap_user is not None:
                ldap_user.unbind()
            self.end_headers()
            Log(log_info, verb="GET", code=http_code, username=user, uri=document_uri, path=file_path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="""Simple Nginx LDAP authentication helper.""")
    parser.add_argument('--host', default="localhost", help="host to bind (Default: localhost)")
    parser.add_argument('-p', '--port', type=int, default=8888, help="port to bind (Default: 8888)")
    parser.add_argument('-c', '--config', default='/etc/pam_ldap.conf', help="config with LDAP creds (Default: /etc/pam_ldap.conf)")
    args = parser.parse_args()

    read_conf(args.config)

    drop_privileges()
    signal.signal(signal.SIGINT, exit_handler)

    try :
        files_descriptor = DataFileStorage()
        files_descriptor.load(conf['filedescrpth'])

        server = AuthHTTPServer((args.host, args.port), LDAPAuthHandler)
        server.serve_forever()
    except:
        Log(str(sys.exc_info()[0]))
